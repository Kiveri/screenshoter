package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tebeka/selenium"
	"github.com/tebeka/selenium/chrome"
)

type Config struct {
	PageLoadWait  int `json:"pageLoadWait"`  // –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–µ–∫—É–Ω–¥—ã)
	DriverTimeout int `json:"driverTimeout"` // –¢–∞–π–º–∞—É—Ç –¥–ª—è ChromeDriver (—Å–µ–∫—É–Ω–¥—ã)
	MaxRetries    int `json:"maxRetries"`    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
	MaxWorkers    int `json:"maxWorkers"`    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
}

const (
	configFile      = "config.json"
	linksFile       = "links.txt"
	screenshotsDir  = "screenshots"
	failedLinksFile = "failed_links.txt"
	chromeDriver    = "chromedriver.exe" // –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
)

func main() {
	fmt.Println("üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü")
	fmt.Println("------------------------------------------")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	if wd, err := os.Getwd(); err == nil {
		fmt.Printf("üìÇ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s\n", wd)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	fmt.Println("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
	cfg, err := loadConfig(configFile)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}
	printConfig(cfg)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chromedriver.exe –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chromedriver.exe...")
	driverPath := filepath.Join(".", chromeDriver)
	absDriverPath, err := filepath.Abs(driverPath)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏: %v", err)
	}

	if _, err := os.Stat(absDriverPath); os.IsNotExist(err) {
		log.Fatalf("‚ùå chromedriver.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: %s\n"+
			"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"+
			"1. chromedriver.exe –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞\n"+
			"2. –ò–º—è —Ñ–∞–π–ª–∞ —Ç–æ—á–Ω–æ 'chromedriver.exe'\n"+
			"3. –§–∞–π–ª –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º", absDriverPath)
	}
	fmt.Printf("‚úÖ chromedriver.exe –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: %s\n", absDriverPath)

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–æ–∫
	fmt.Println("üìÇ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ...")
	if err := prepareWorkspace(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: %v", err)
	}

	// –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
	fmt.Println("üîó –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫...")
	links, err := readLinksFromFile(linksFile)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏: %v", err)
	}

	if len(links) == 0 {
		log.Fatal("‚ùå –§–∞–π–ª —Å —Å—Å—ã–ª–∫–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL")
	}

	fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n", len(links))

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
	jobs := make(chan string, len(links))
	results := make(chan processingResult, len(links))

	// –ó–∞–ø—É—Å–∫–∞–µ–º worker'–æ–≤
	var wg sync.WaitGroup
	for i := 0; i < cfg.MaxWorkers; i++ {
		wg.Add(1)
		go worker(i+1, jobs, results, &wg, cfg, driverPath)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫–∞–Ω–∞–ª
	for _, url := range links {
		jobs <- url
	}
	close(jobs)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	go func() {
		wg.Wait()
		close(results)
	}()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	var (
		successCount int
		failedLinks  []string
	)

	fmt.Println("\nüõ†Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫...")
	for result := range results {
		if result.Error != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ [%s]: %v", result.URL, result.Error)
			failedLinks = append(failedLinks, result.URL)
		} else {
			log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ [%s]", result.URL)
			successCount++
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
	if len(failedLinks) > 0 {
		fmt.Printf("\n‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º %d –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫...\n", len(failedLinks))
		if err := saveFailedLinks(failedLinks); err != nil {
			log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: %v", err)
		}
	}

	fmt.Printf("\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: %d | –ù–µ —É–¥–∞–ª–æ—Å—å: %d\n", successCount, len(failedLinks))
	if len(failedLinks) > 0 {
		fmt.Printf("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", failedLinksFile)
	}
}

type processingResult struct {
	URL   string
	Error error
}

func worker(id int, jobs <-chan string, results chan<- processingResult, wg *sync.WaitGroup, cfg *Config, driverPath string) {
	defer wg.Done()

	for url := range jobs {
		log.Printf("üë∑ Worker #%d –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É: %s", id, url)
		var err error

		for attempt := 1; attempt <= cfg.MaxRetries; attempt++ {
			if attempt > 1 {
				log.Printf("üîÑ Worker #%d –ø–æ–ø—ã—Ç–∫–∞ %d/%d –¥–ª—è: %s", id, attempt, cfg.MaxRetries, url)
			}

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
			port, cmd, driverErr := startChromeDriver(driverPath, time.Duration(cfg.DriverTimeout)*time.Second)
			if driverErr != nil {
				err = fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ChromeDriver: %v", driverErr)
				continue
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL
			processErr := processURL(url, port, cfg.PageLoadWait)

			// –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
			if cmd.Process != nil {
				cmd.Process.Kill()
			}

			if processErr == nil {
				err = nil
				break
			}

			err = processErr
		}

		results <- processingResult{URL: url, Error: err}
	}
}

func processURL(url string, port int, pageLoadWait int) error {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome
	chromeCaps := chrome.Capabilities{
		Args: []string{
			"--headless",
			"--disable-gpu",
			"--window-size=1280,1024",
		},
	}

	caps := selenium.Capabilities{"browserName": "chrome"}
	caps.AddChrome(chromeCaps)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ChromeDriver
	wd, err := selenium.NewRemote(caps, fmt.Sprintf("http://localhost:%d", port))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromeDriver: %v", err)
	}
	defer wd.Quit()

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
	if err := wd.Get(url); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
	}

	time.Sleep(time.Duration(pageLoadWait) * time.Second)

	// –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
	filename := generateFilename(url)
	screenshotPath := filepath.Join(screenshotsDir, filename)

	screenshot, err := wd.Screenshot()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: %v", err)
	}

	if err := os.WriteFile(screenshotPath, screenshot, 0644); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: %v", err)
	}

	return nil
}

func generateFilename(url string) string {
	now := time.Now().UTC().Add(3 * time.Hour)
	timestamp := now.Format("2006-01-02_15-04-05.000") // –ß–ß:–ú–ú_–î–î.–ú–ú.–ì–ì–ì–ì

	cleanURL := strings.NewReplacer(
		"https://", "",
		"http://", "",
		"/", "_",
		"?", "_",
		"=", "_",
		"&", "_",
		":", "_",
		" ", "_",
		".", "_",
		",", "_",
	).Replace(url)

	if len(cleanURL) > 100 {
		cleanURL = cleanURL[:100]
	}

	randNum := rand.Intn(1000)

	return fmt.Sprintf("screenshot_%s_%s_%d.png", timestamp, cleanURL, randNum)
}

func startChromeDriver(driverPath string, timeout time.Duration) (int, *exec.Cmd, error) {
	// –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ chromedriver.exe
	absDriverPath, err := filepath.Abs(driverPath)
	if err != nil {
		return 0, nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(absDriverPath); os.IsNotExist(err) {
		return 0, nil, fmt.Errorf("chromedriver.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: %s", absDriverPath)
	}

	port, err := getFreePort()
	if err != nil {
		return 0, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: %v", err)
	}

	// –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
	cmd := exec.Command(absDriverPath, fmt.Sprintf("--port=%d", port))
	if err := cmd.Start(); err != nil {
		return 0, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ChromeDriver: %v (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å: %s)", err, absDriverPath)
	}

	if err := waitForChromeDriver(port, timeout); err != nil {
		cmd.Process.Kill()
		return 0, nil, err
	}

	return port, cmd, nil
}

func waitForChromeDriver(port int, timeout time.Duration) error {
	start := time.Now()
	for time.Since(start) < timeout {
		conn, err := net.DialTimeout("tcp", fmt.Sprintf("localhost:%d", port), 1*time.Second)
		if err == nil {
			conn.Close()
			return nil
		}
		time.Sleep(500 * time.Millisecond)
	}
	return fmt.Errorf("ChromeDriver –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ %v", timeout)
}

func loadConfig(filename string) (*Config, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var cfg Config
	if err := json.Unmarshal(data, &cfg); err != nil {
		return nil, err
	}

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if cfg.PageLoadWait <= 0 {
		cfg.PageLoadWait = 5
	}
	if cfg.DriverTimeout <= 0 {
		cfg.DriverTimeout = 10
	}
	if cfg.MaxRetries <= 0 {
		cfg.MaxRetries = 3
	}
	if cfg.MaxWorkers <= 0 {
		cfg.MaxWorkers = 5
	}

	return &cfg, nil
}

func prepareWorkspace() error {
	if err := os.MkdirAll(screenshotsDir, 0755); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: %v", err)
	}

	// –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
	if err := os.WriteFile(failedLinksFile, []byte{}, 0644); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: %v", err)
	}

	return nil
}

func readLinksFromFile(filename string) ([]string, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var links []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" && (strings.HasPrefix(line, "http://") || strings.HasPrefix(line, "https://")) {
			links = append(links, line)
		}
	}

	return links, scanner.Err()
}

func saveFailedLinks(links []string) error {
	content := strings.Join(links, "\n")
	return os.WriteFile(failedLinksFile, []byte(content), 0644)
}

func printConfig(cfg *Config) {
	fmt.Printf(`
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
- –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %d —Å–µ–∫
- –¢–∞–π–º–∞—É—Ç ChromeDriver: %d —Å–µ–∫
- –ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫: %d
- –ú–∞–∫—Å. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: %d
`,
		cfg.PageLoadWait,
		cfg.DriverTimeout,
		cfg.MaxRetries,
		cfg.MaxWorkers)
}

func getFreePort() (int, error) {
	addr, err := net.ResolveTCPAddr("tcp", "localhost:0")
	if err != nil {
		return 0, err
	}

	l, err := net.ListenTCP("tcp", addr)
	if err != nil {
		return 0, err
	}
	defer l.Close()

	return l.Addr().(*net.TCPAddr).Port, nil
}
